{"version":3,"sources":["logo.svg","Components/EditTray/index.js","Components/TokenDrawer/index.js","Components/MapDrawer/index.js","Components/OptionTray/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","EditBar","props","className","onClick","toggleTokens","toggleMaps","close","toggleOptions","TokenDrawer","drawerState","state","action","for","id","type","onChange","getToken","tokens","map","token","index","src","width","height","MapDrawer","getMap","maps","changeMap","OptionTray","min","max","class","onInput","scaleGrid","bind","this","App","useState","TokenDrawerState","setTokenDrawerState","MapDrawerState","setMapDrawerState","optionTray","setOptionTray","gridScale","setGridScale","mapList","setMapList","tokenList","setTokenList","currentMap","setCurrentMap","setWidth","setHeight","canvasRef","useRef","drawGrid","canvas","current","context","getContext","document","body","clientWidth","clientHeight","w","h","x","moveTo","lineTo","onload","drawImage","strokeStyle","stroke","useEffect","event","scale","parseInt","target","value","imageFiles","files","filesLength","length","reader","FileReader","file","i","onloadend","base_image","Image","result","readAsDataURL","newMap","ref","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b06a33d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { MdLayers } from 'react-icons/md';\r\nimport { FaPaintBrush } from 'react-icons/fa';\r\nimport { FaDrawPolygon} from 'react-icons/fa';\r\nimport { FiMove } from 'react-icons/fi';\r\nimport { GiSelect } from 'react-icons/gi';\r\nimport { TiContacts } from 'react-icons/ti';\r\nimport { RiTreasureMapLine } from 'react-icons/ri';\r\nimport { BiCog } from 'react-icons/bi';\r\nimport { CgMinimizeAlt } from 'react-icons/cg';\r\nimport { CgColorBucket } from 'react-icons/cg';\r\nimport './index.css';\r\n\r\nfunction EditBar(props) {\r\n  return (\r\n    <div className=\"tray\"> \r\n        <div className=\"edit-icon\">\r\n            <MdLayers />\r\n        </div>\r\n        <div className=\"edit-icon\">\r\n            <FaPaintBrush />\r\n        </div>\r\n        <div className=\"edit-icon\">\r\n            <CgColorBucket />\r\n        </div>\r\n        <div className=\"edit-icon\">\r\n            <FaDrawPolygon />\r\n        </div>\r\n        <div className=\"edit-icon\">\r\n            <GiSelect />\r\n        </div>\r\n        <div className=\"edit-icon\"> \r\n            <FiMove />\r\n        </div>\r\n\r\n        <div className=\"edit-bar\">\r\n\r\n        </div>\r\n\r\n        <div className=\"edit-icon\">\r\n            <TiContacts onClick={props.toggleTokens} />\r\n        </div>\r\n\r\n        <div className=\"edit-icon\">\r\n            <RiTreasureMapLine  onClick={props.toggleMaps} />\r\n        </div>\r\n        <div className=\"edit-icon\">\r\n            <CgMinimizeAlt onClick={props.close} />\r\n        </div>\r\n        <div className=\"edit-icon\">\r\n            <BiCog onClick={props.toggleOptions} />\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditBar;","import React from 'react';\r\nimport { BsPlusSquare } from 'react-icons/bs';\r\nimport './index.css';\r\n\r\nfunction TokenDrawer(props) {\r\n    let drawerState = 'token-drawer';\r\n    if(props.state === \"drawerDocked\"){\r\n        drawerState = 'token-drawer docked'\r\n    }\r\n    else {\r\n        drawerState = 'token-drawer';\r\n    }\r\n\r\n  return (\r\n    <div className={drawerState} > \r\n      <form action=\"/action_page.php\" className=\"token-form\">\r\n        <label for=\"token-input\" >\r\n          <div className=\"add-icon\">\r\n          <BsPlusSquare  />\r\n          </div>\r\n        </label>\r\n        <input id=\"token-input\" type=\"file\" onChange={props.getToken}/>\r\n      </form>\r\n      <div className=\"token-container\">\r\n        {props.tokens[0] && props.tokens.map((token, index) =>(<img src={token.src} id={index +\"token\"} width=\"100\" height=\"100\"  />))} \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TokenDrawer;","import React from \"react\";\r\nimport { BsPlusSquare } from 'react-icons/bs';\r\nimport './index.css';\r\n\r\nfunction MapDrawer(props) {\r\n\r\n  \r\n\r\n\r\n    let drawerState = 'map-drawer';\r\n    if(props.state === \"drawerOpen\"){\r\n        drawerState = 'map-drawer open'\r\n    }\r\n    else {\r\n        drawerState = 'map-drawer';\r\n    }\r\n\r\n\r\n\r\n  return (\r\n    \r\n    <div className={drawerState} > \r\n      <form action=\"/action_page.php\" className=\"map-form\">\r\n        <label for=\"file-input\" >\r\n          <div className=\"add-icon\">\r\n            <BsPlusSquare  />\r\n          </div>\r\n        </label>\r\n        <input id=\"file-input\" type=\"file\" onChange={props.getMap}/>\r\n      </form>\r\n      <div className=\"map-container\">\r\n        {props.maps[0] && props.maps.map((map, index) =>(<img src={map.src} id={index +\"map\"} width=\"100\" height=\"50\" onClick={props.changeMap} />))} \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MapDrawer;","import React, { useState, useEffect } from \"react\";\r\nimport { BsToggleOff } from 'react-icons/bs';\r\nimport { BsToggleOn } from 'react-icons/bs';\r\n\r\nimport './index.css';\r\n\r\nfunction OptionTray(props)  {\r\n\r\n  return (\r\n    <div className=\"options\"> \r\n        <div>\r\n            Grid Size\r\n        </div>\r\n        <div>\r\n            <input type=\"range\" min=\"1\" max=\"100\" class=\"slider\" onInput={props.scaleGrid.bind(this)}/>\r\n        </div>\r\n        <div>\r\n            Mode\r\n        </div>\r\n        <div>\r\n            <BsToggleOff />\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OptionTray;","import React, { useState, useEffect, useRef } from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport EditTray from './Components/EditTray';\nimport TokenDrawer from './Components/TokenDrawer';\nimport MapDrawer from './Components/MapDrawer';\nimport OptionTray from './Components/OptionTray';\n\nfunction App(props) {\n  const [TokenDrawerState, setTokenDrawerState] = useState(\"drawerClosed\");\n  const [MapDrawerState, setMapDrawerState] = useState(\"drawerClosed\");\n  const [optionTray, setOptionTray] = useState(false);\n  const [gridScale, setGridScale] = useState(50);\n  const [mapList, setMapList] = useState([]);\n  const [tokenList, setTokenList] = useState([]);\n  const [currentMap, setCurrentMap] = useState(null);\n  const [width, setWidth] = useState(null);\n  const [height, setHeight] = useState(null);\n  const canvasRef = useRef(null);  \n\n  useEffect(() => {\n\n    // Initialize grid on canvas\n    drawGrid();\n\n  },[]);\n  \n  function toggleOptionTray(){\n    setOptionTray(!optionTray);\n  }\n\n  function closeAll(){\n    setOptionTray(false);\n    setTokenDrawerState(\"drawerClosed\");\n    setMapDrawerState(\"drawerClosed\");\n  }\n\n  function toggleTokens(){\n\n    if(MapDrawerState === \"drawerOpen\")\n      toggleMaps();\n\n    if(TokenDrawerState === \"drawerClosed\")\n      setTokenDrawerState(\"drawerDocked\")\n    else \n      setTokenDrawerState(\"drawerClosed\")\n  }\n\n  function toggleMaps(){\n\n    if(TokenDrawerState === \"drawerDocked\")\n      toggleTokens();\n\n    if(MapDrawerState === \"drawerClosed\")\n      setMapDrawerState(\"drawerOpen\")\n    else \n      setMapDrawerState(\"drawerClosed\")\n\n  }\n\n  function scaleGrid(event){\n\n    let scale = parseInt(event.target.value);\n\n    if(currentMap){\n      drawGrid(scale, currentMap);\n    }\n    else \n      drawGrid(scale);\n\n    setGridScale(scale);\n  }\n\n  function drawGrid(gridScale = 50, map = null){\n\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    if(width == null || height == null){\n      setWidth(document.body.clientWidth);\n      setHeight(document.body.clientHeight);\n      canvas.width = document.body.clientWidth;\n      canvas.height = document.body.clientHeight;\n    }else{\n      canvas.width = width;\n      canvas.height = height\n    }\n\n    let w = canvas.width;\n    let h = canvas.height;\n\n    for (let x = 0; x <= w; x += gridScale) {\n        context.moveTo(0.5 + x, 0);\n        context.lineTo(0.5 + x, h);\n    }\n\n    for (let x = 0; x <= h; x += gridScale) {\n        context.moveTo(0, 0.5 + x );\n        context.lineTo(w, 0.5 + x);\n    }\n\n    if(map){\n\n      map.onload = function(){\n        context.drawImage(map, 0, 0, w, h);\n        context.strokeStyle = \"black\";\n        context.stroke();\n      }\n      context.drawImage(map, 0, 0, w, h);\n      context.strokeStyle = \"black\";\n      context.stroke();\n      \n    }\n    else {\n      context.strokeStyle = \"black\";\n      context.stroke();\n    }\n  }\n\n  function changeMap(event){\n    let newMap = mapList[event.target.id[0]]\n    setCurrentMap(newMap);\n    drawGrid(gridScale, newMap);\n  }\n  \n  function uploadHandler(event){\n\n    const imageFiles = event.target.files;\n    const filesLength = imageFiles.length; \n    for(var i = 0; i < filesLength; i++) {\n        let reader = new FileReader();\n        let file = imageFiles[i];\n\n        reader.onloadend = () => {\n          \n          let base_image = new Image();\n          base_image.src = reader.result;\n          base_image.width = \"2000\";\n\n          if(!currentMap){\n            setCurrentMap(base_image);\n            drawGrid(gridScale, base_image);\n          }\n\n          setMapList(mapList => [...mapList, base_image]);\n        }\n\n        reader.readAsDataURL(file);\n    }\n  }\n\n  function uploadToken(event){\n\n    const imageFiles = event.target.files;\n    const filesLength = imageFiles.length; \n    for(var i = 0; i < filesLength; i++) {\n        let reader = new FileReader();\n        let file = imageFiles[i];\n\n        reader.onloadend = () => {\n          \n          let base_image = new Image();\n          base_image.src = reader.result;\n          base_image.width = \"2000\";\n\n          setTokenList(mapList => [...mapList, base_image]);\n        }\n\n        reader.readAsDataURL(file);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <EditTray toggleTokens={toggleTokens} toggleMaps={toggleMaps} toggleOptions={toggleOptionTray} close={closeAll} />\n      {optionTray && <OptionTray scaleGrid={scaleGrid} />}\n      <TokenDrawer state={TokenDrawerState} getToken={uploadToken} tokens={tokenList} />\n      <MapDrawer state={MapDrawerState} getMap={uploadHandler} maps={mapList} changeMap={changeMap} />\n      <canvas ref={canvasRef} className={\"map-canvas\"}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}