{"version":3,"sources":["logo.svg","Components/EditTray/index.js","Components/TokenDrawer/index.js","Components/MapDrawer/index.js","Components/OptionTray/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","EditBar","props","className","onClick","toggleTokens","toggleMaps","close","toggleOptions","TokenDrawer","drawerState","state","MapDrawer","OptionTray","type","min","max","class","onInput","scaleGrid","bind","this","App","useState","TokenDrawerState","setTokenDrawerState","MapDrawerState","setMapDrawerState","optionTray","setOptionTray","setMap","canvasRef","useRef","drawCanvas","canvas","context","gridScale","width","document","body","clientWidth","height","clientHeight","p","scale","x","moveTo","lineTo","strokeStyle","stroke","useEffect","current","getContext","event","clearRect","window","innerHeight","innerWidth","beginPath","clearcanvas","parseInt","target","value","ref","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1472385f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { MdLayers } from 'react-icons/md';\r\nimport { FaPaintBrush } from 'react-icons/fa';\r\nimport { FaDrawPolygon} from 'react-icons/fa';\r\nimport { FiMove } from 'react-icons/fi';\r\nimport { GiSelect } from 'react-icons/gi';\r\nimport { TiContacts } from 'react-icons/ti';\r\nimport { RiTreasureMapLine } from 'react-icons/ri';\r\nimport { BiCog } from 'react-icons/bi';\r\nimport { CgMinimizeAlt } from 'react-icons/cg';\r\nimport { CgColorBucket } from 'react-icons/cg';\r\nimport './index.css';\r\n\r\nfunction EditBar(props) {\r\n  return (\r\n    <div className=\"tray\"> \r\n        <div className=\"edit-icon\">\r\n            <MdLayers />\r\n        </div>\r\n        <div className=\"edit-icon\">\r\n            <FaPaintBrush />\r\n        </div>\r\n        <div className=\"edit-icon\">\r\n            <CgColorBucket />\r\n        </div>\r\n        <div className=\"edit-icon\">\r\n            <FaDrawPolygon />\r\n        </div>\r\n        <div className=\"edit-icon\">\r\n            <GiSelect />\r\n        </div>\r\n        <div className=\"edit-icon\"> \r\n            <FiMove />\r\n        </div>\r\n\r\n        <div className=\"edit-bar\">\r\n\r\n        </div>\r\n\r\n        <div className=\"edit-icon\">\r\n            <TiContacts onClick={props.toggleTokens} />\r\n        </div>\r\n\r\n        <div className=\"edit-icon\">\r\n            <RiTreasureMapLine  onClick={props.toggleMaps} />\r\n        </div>\r\n        <div className=\"edit-icon\">\r\n            <CgMinimizeAlt onClick={props.close} />\r\n        </div>\r\n        <div className=\"edit-icon\">\r\n            <BiCog onClick={props.toggleOptions} />\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditBar;","import React from 'react';\r\nimport { AiOutlineExpand } from 'react-icons/ai';\r\nimport './index.css';\r\n\r\nfunction TokenDrawer(props) {\r\n    let drawerState = 'token-drawer';\r\n    if(props.state === \"drawerDocked\"){\r\n        drawerState = 'token-drawer docked'\r\n    }\r\n    else {\r\n        drawerState = 'token-drawer';\r\n    }\r\n\r\n  return (\r\n    <div className={drawerState} > \r\n    tokens will be able to be added here and dragged onto the\r\n      <div className=\"token-options\">\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TokenDrawer;","import React from 'react';\r\nimport './index.css';\r\n\r\nfunction MapDrawer(props) {\r\n    let drawerState = 'map-drawer';\r\n    if(props.state === \"drawerOpen\"){\r\n        drawerState = 'map-drawer open'\r\n    }\r\n    else {\r\n        drawerState = 'map-drawer';\r\n    }\r\n\r\n  return (\r\n    <div className={drawerState} > \r\n    Maps will go here.\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MapDrawer;","import React, { useState, useEffect } from \"react\";\r\nimport { BsToggleOff } from 'react-icons/bs';\r\nimport { BsToggleOn } from 'react-icons/bs';\r\n\r\nimport './index.css';\r\n\r\nfunction OptionTray(props)  {\r\n\r\n  return (\r\n    <div className=\"options\"> \r\n        <div>\r\n            Grid Size\r\n        </div>\r\n        <div>\r\n            <input type=\"range\" min=\"1\" max=\"100\" class=\"slider\" onInput={props.scaleGrid.bind(this)}/>\r\n        </div>\r\n        <div>\r\n            Mode\r\n        </div>\r\n        <div>\r\n            <BsToggleOff />\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OptionTray;","import React, { useState, useEffect, useRef } from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport EditTray from './Components/EditTray';\nimport TokenDrawer from './Components/TokenDrawer';\nimport MapDrawer from './Components/MapDrawer';\nimport OptionTray from './Components/OptionTray';\nimport Map from './Components/MapCanvas';\n\n\n\nfunction App(props) {\n  const [TokenDrawerState, setTokenDrawerState] = useState(\"drawerClosed\");\n  const [MapDrawerState, setMapDrawerState] = useState(\"drawerClosed\");\n  const [optionTray, setOptionTray] = useState(false);\n  const [map, setMap] = useState(false);\n  const canvasRef = useRef(null);  \n\n  useEffect(() => {\n\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    drawCanvas(canvas, context);\n    setMap(true);\n\n  },[]);\n  \n  function toggleOptionTray(){\n    setOptionTray(!optionTray);\n  }\n\n  function closeAll(){\n    setOptionTray(false);\n    setTokenDrawerState(\"drawerClosed\");\n    setMapDrawerState(\"drawerClosed\");\n  }\n\n  function toggleTokens(){\n\n    if(MapDrawerState === \"drawerOpen\")\n      toggleMaps();\n\n    if(TokenDrawerState === \"drawerClosed\")\n      setTokenDrawerState(\"drawerDocked\")\n    else \n      setTokenDrawerState(\"drawerClosed\")\n  }\n\n  function toggleMaps(){\n\n    if(TokenDrawerState === \"drawerDocked\")\n      toggleTokens();\n\n    if(MapDrawerState === \"drawerClosed\")\n      setMapDrawerState(\"drawerOpen\")\n    else \n      setMapDrawerState(\"drawerClosed\")\n\n  }\n\n  function scaleGrid(event){\n\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    clearcanvas(canvas, context);\n    drawCanvas(canvas, context, parseInt(event.target.value));\n  }\n\n  function drawCanvas(canvas, context, gridScale = 50){\n    let width = document.body.clientWidth;;\n    let height = document.body.clientHeight;\n    let p = 0;\n    let scale = 1;\n\n    canvas.width = width;\n    canvas.height = height;\n\n    //let base_image = new Image();\n    //base_image.src = map;\n   \n      context.scale(scale, scale);\n      //context.drawImage(base_image, 0, 0, base_image.width, base_image.height, 0, 0, canvas.width, canvas.height);\n      \n      for (let x = 0; x <= width; x += gridScale) {\n          context.moveTo(0.5 + x + p, p);\n          context.lineTo(0.5 + x + p, height + p);\n      }\n\n      for (let x = 0; x <= height; x += gridScale) {\n          context.moveTo(p, 0.5 + x );\n          context.lineTo(width + p, 0.5 + x + p);\n      }\n\n      context.strokeStyle = \"black\";\n      context.stroke();\n  }\n\n  function clearcanvas(canvas, context){\n    context.clearRect(0, 0, window.innerHeight, window.innerWidth);\n    context.beginPath();\n    canvas.width=canvas.width;\n    canvas.height=canvas.height;\n  }\n\n  return (\n    <div className=\"App\">\n      <EditTray toggleTokens={toggleTokens} toggleMaps={toggleMaps} toggleOptions={toggleOptionTray} close={closeAll} />\n      {optionTray && <OptionTray scaleGrid={scaleGrid} />}\n      <TokenDrawer state={TokenDrawerState}/>\n      <MapDrawer state={MapDrawerState} />\n      <canvas ref={canvasRef} className={\"map-canvas\"}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}