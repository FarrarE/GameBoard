{"version":3,"sources":["logo.svg","Components/EditTray/index.js","Components/TokenDrawer/index.js","Components/MapDrawer/index.js","Components/OptionTray/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","EditBar","props","className","onClick","toggleTokens","toggleMaps","close","toggleOptions","TokenDrawer","drawerState","state","MapDrawer","action","for","type","id","name","accept","onChange","getMap","OptionTray","min","max","class","onInput","scaleGrid","bind","this","App","useState","TokenDrawerState","setTokenDrawerState","MapDrawerState","setMapDrawerState","optionTray","setOptionTray","gridScale","currentMap","setCurrentMap","width","setWidth","height","setHeight","canvasRef","useRef","drawGrid","map","canvas","current","context","getContext","document","body","clientWidth","clientHeight","w","h","x","moveTo","lineTo","onload","drawImage","strokeStyle","stroke","useEffect","event","parseInt","target","value","imageFiles","files","filesLength","length","reader","FileReader","file","i","onloadend","base_image","Image","src","result","readAsDataURL","ref","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6968a24e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { MdLayers } from 'react-icons/md';\r\nimport { FaPaintBrush } from 'react-icons/fa';\r\nimport { FaDrawPolygon} from 'react-icons/fa';\r\nimport { FiMove } from 'react-icons/fi';\r\nimport { GiSelect } from 'react-icons/gi';\r\nimport { TiContacts } from 'react-icons/ti';\r\nimport { RiTreasureMapLine } from 'react-icons/ri';\r\nimport { BiCog } from 'react-icons/bi';\r\nimport { CgMinimizeAlt } from 'react-icons/cg';\r\nimport { CgColorBucket } from 'react-icons/cg';\r\nimport './index.css';\r\n\r\nfunction EditBar(props) {\r\n  return (\r\n    <div className=\"tray\"> \r\n        <div className=\"edit-icon\">\r\n            <MdLayers />\r\n        </div>\r\n        <div className=\"edit-icon\">\r\n            <FaPaintBrush />\r\n        </div>\r\n        <div className=\"edit-icon\">\r\n            <CgColorBucket />\r\n        </div>\r\n        <div className=\"edit-icon\">\r\n            <FaDrawPolygon />\r\n        </div>\r\n        <div className=\"edit-icon\">\r\n            <GiSelect />\r\n        </div>\r\n        <div className=\"edit-icon\"> \r\n            <FiMove />\r\n        </div>\r\n\r\n        <div className=\"edit-bar\">\r\n\r\n        </div>\r\n\r\n        <div className=\"edit-icon\">\r\n            <TiContacts onClick={props.toggleTokens} />\r\n        </div>\r\n\r\n        <div className=\"edit-icon\">\r\n            <RiTreasureMapLine  onClick={props.toggleMaps} />\r\n        </div>\r\n        <div className=\"edit-icon\">\r\n            <CgMinimizeAlt onClick={props.close} />\r\n        </div>\r\n        <div className=\"edit-icon\">\r\n            <BiCog onClick={props.toggleOptions} />\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditBar;","import React from 'react';\r\nimport { AiOutlineExpand } from 'react-icons/ai';\r\nimport './index.css';\r\n\r\nfunction TokenDrawer(props) {\r\n    let drawerState = 'token-drawer';\r\n    if(props.state === \"drawerDocked\"){\r\n        drawerState = 'token-drawer docked'\r\n    }\r\n    else {\r\n        drawerState = 'token-drawer';\r\n    }\r\n\r\n  return (\r\n    <div className={drawerState} > \r\n    tokens will be able to be added here. They will be added to the map and organized using drag and drop.\r\n      <div className=\"token-options\">\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TokenDrawer;","import React from 'react';\r\nimport './index.css';\r\n\r\nfunction MapDrawer(props) {\r\n    let drawerState = 'map-drawer';\r\n    if(props.state === \"drawerOpen\"){\r\n        drawerState = 'map-drawer open'\r\n    }\r\n    else {\r\n        drawerState = 'map-drawer';\r\n    }\r\n\r\n  return (\r\n    <div className={drawerState} > \r\n      <form action=\"/action_page.php\">\r\n        <label for=\"img\">Select image:</label>\r\n        <input type=\"file\" id=\"img\" name=\"img\" accept=\"image/*\" onChange={props.getMap}/>\r\n      </form>\r\n      <h1>Maps</h1>\r\n      <div className=\"map-container\">\r\n        <div className=\"map-thumbnail\"></div>\r\n        <div className=\"map-thumbnail\"></div>\r\n        <div className=\"map-thumbnail\"></div>\r\n        <div className=\"map-thumbnail\"></div>\r\n        <div className=\"map-thumbnail\"></div>\r\n        <div className=\"map-thumbnail\"></div>\r\n        <div className=\"map-thumbnail\"></div>\r\n        <div className=\"map-thumbnail\"></div>\r\n        <div className=\"map-thumbnail\"></div>\r\n        <div className=\"map-thumbnail\"></div>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MapDrawer;","import React, { useState, useEffect } from \"react\";\r\nimport { BsToggleOff } from 'react-icons/bs';\r\nimport { BsToggleOn } from 'react-icons/bs';\r\n\r\nimport './index.css';\r\n\r\nfunction OptionTray(props)  {\r\n\r\n  return (\r\n    <div className=\"options\"> \r\n        <div>\r\n            Grid Size\r\n        </div>\r\n        <div>\r\n            <input type=\"range\" min=\"1\" max=\"100\" class=\"slider\" onInput={props.scaleGrid.bind(this)}/>\r\n        </div>\r\n        <div>\r\n            Mode\r\n        </div>\r\n        <div>\r\n            <BsToggleOff />\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OptionTray;","import React, { useState, useEffect, useRef } from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport EditTray from './Components/EditTray';\nimport TokenDrawer from './Components/TokenDrawer';\nimport MapDrawer from './Components/MapDrawer';\nimport OptionTray from './Components/OptionTray';\n\nfunction App(props) {\n  const [TokenDrawerState, setTokenDrawerState] = useState(\"drawerClosed\");\n  const [MapDrawerState, setMapDrawerState] = useState(\"drawerClosed\");\n  const [optionTray, setOptionTray] = useState(false);\n  const [gridScale, setGridScale] = useState(50);\n  const [currentMap, setCurrentMap] = useState(null);\n  const [width, setWidth] = useState(null);\n  const [height, setHeight] = useState(null);\n  const canvasRef = useRef(null);  \n\n  useEffect(() => {\n\n    // Initialize grid on canvas\n    drawGrid();\n\n  },[]);\n  \n  function toggleOptionTray(){\n    setOptionTray(!optionTray);\n  }\n\n  function closeAll(){\n    setOptionTray(false);\n    setTokenDrawerState(\"drawerClosed\");\n    setMapDrawerState(\"drawerClosed\");\n  }\n\n  function toggleTokens(){\n\n    if(MapDrawerState === \"drawerOpen\")\n      toggleMaps();\n\n    if(TokenDrawerState === \"drawerClosed\")\n      setTokenDrawerState(\"drawerDocked\")\n    else \n      setTokenDrawerState(\"drawerClosed\")\n  }\n\n  function toggleMaps(){\n\n    if(TokenDrawerState === \"drawerDocked\")\n      toggleTokens();\n\n    if(MapDrawerState === \"drawerClosed\")\n      setMapDrawerState(\"drawerOpen\")\n    else \n      setMapDrawerState(\"drawerClosed\")\n\n  }\n\n  function scaleGrid(event){\n\n    if(currentMap){\n      drawGrid(parseInt(event.target.value), currentMap);\n    }\n    else \n      drawGrid(parseInt(event.target.value));\n  }\n\n  function drawGrid(gridScale = 50, map = null){\n\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    if(width == null || height == null){\n      setWidth(document.body.clientWidth);\n      setHeight(document.body.clientHeight);\n      canvas.width = document.body.clientWidth;\n      canvas.height = document.body.clientHeight;\n    }else{\n      canvas.width = width;\n      canvas.height = height\n    }\n\n    let w = canvas.width;\n    let h = canvas.height;\n\n    for (let x = 0; x <= w; x += gridScale) {\n        context.moveTo(0.5 + x, 0);\n        context.lineTo(0.5 + x, h);\n    }\n\n    for (let x = 0; x <= h; x += gridScale) {\n        context.moveTo(0, 0.5 + x );\n        context.lineTo(w, 0.5 + x);\n    }\n\n    if(map){\n\n      map.onload = function(){\n        context.drawImage(map, 0, 0, w, h);\n        context.strokeStyle = \"black\";\n        context.stroke();\n      }\n      context.drawImage(map, 0, 0, w, h);\n      context.strokeStyle = \"black\";\n      context.stroke();\n      \n    }\n    else {\n      context.strokeStyle = \"black\";\n      context.stroke();\n    }\n\n  }\n\n  function clearcanvas(){\n\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, window.innerHeight, window.innerWidth);\n    context.beginPath();\n    canvas.width=canvas.width;\n    canvas.height=canvas.height;\n  }\n\n  function uploadHandler(event){\n\n    const imageFiles = event.target.files;\n    const filesLength = imageFiles.length; \n    for(var i = 0; i < filesLength; i++) {\n        let reader = new FileReader();\n        let file = imageFiles[i];\n\n        reader.onloadend = () => {\n          \n          let base_image = new Image();\n          base_image.src = reader.result;\n          base_image.width = \"2000\";\n          setCurrentMap(base_image);\n          drawGrid(gridScale, base_image);\n        }\n\n        reader.readAsDataURL(file);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <EditTray toggleTokens={toggleTokens} toggleMaps={toggleMaps} toggleOptions={toggleOptionTray} close={closeAll} />\n      {optionTray && <OptionTray scaleGrid={scaleGrid} />}\n      <TokenDrawer state={TokenDrawerState}/>\n      <MapDrawer state={MapDrawerState} getMap={uploadHandler}/>\n      <canvas ref={canvasRef} className={\"map-canvas\"}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}